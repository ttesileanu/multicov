function res = alncompare(aln1, aln2)
% ALNCOMPARE Compare two alignments for equality.
%   res = ALNCOMPARE(aln1, aln2) compares the two alignments for equality.
%
%   Note that isequal can be used to compare alignments for equality.
%   Compared to isequal, ALNCOMPARE is more lenient:
%     - it ignores nonstandard fields between the two alignments (i.e., it
%       only compares those fields that are part of an alignment made by
%       alnmake)
%     - it treats row vectors and column vectors as the same type, so that,
%       unlike with isequal, [1 2 3] and [1 ; 2 ; 3] are considered the same
%     - it allows the sequence weights to differ by amounts within the
%       machine precision
%
% See also: ISEQUAL, ALNMAKE.

% Tiberiu Tesileanu (2013-2014)

if ~alncheck(aln1) || ~alncheck(aln2)
    error([mfilename ':badaln'], 'Both arguments must be alignment structures.');
end

res = (...
    isequal(aln1.alphabets(:), aln2.alphabets(:)) && ...
    isequal(aln1.alphawidths(:), aln2.alphawidths(:)) && ...
    isequal(aln1.data, aln2.data) && ...
    isequal(aln1.annotations(:), aln2.annotations(:)) && ...
    length(aln1.seqw) == length(aln2.seqw) && ...
    all(abs(aln1.seqw(:) - aln2.seqw(:)) <= eps) && ...
    length(aln1.refseq) == length(aln2.refseq)) && ...
    all(arrayfun(@(j) ...
        strcmp(aln1.refseq(j).seqdb, aln2.refseq(j).seqdb) && ...
        strcmp(aln1.refseq(j).seqid, aln2.refseq(j).seqid) && ...
        isequal(aln1.refseq(j).map(:), aln2.refseq(j).map(:)), ...
        1:length(aln1.refseq)));

end