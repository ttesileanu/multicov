function test_checkcontacts
% TEST_CHECKCONTACTS Test checkcontacts.m.

% start by making some mock data
diststruct.refseq = struct(...
    'seqdb', {'', ''}, ...
    'seqid', {'', ''}, ...
    'map', {[1 3 4 6] , {'a' 'b' 'c'}});
diststruct.validmask = ones(7);
diststruct.distmat = [...
%   1 3 4 6 a b c
    0 7 5 3 9 2 8 ; ... % 1
    7 0 9 8 7 5 7 ; ... % 3
    5 9 0 9 2 4 8 ; ... % 4
    3 8 9 0 8 7 9 ; ... % 6
    9 7 2 8 0 7 3 ; ... % a
    2 5 4 7 7 0 8 ; ... % b
    8 7 8 9 3 8 0   ... % c
];

% contacts: 1-4, 1-6, 1-b, 3-b, 4-a, 4-b, a-c

% now make the mock contact predictions
contacts1.refseq = struct(...
    'seqdb', {'', ''}, ...
    'seqid', {'', ''}, ...
    'map', {[1 2 3 4 5], {'a' 'c'}});
contacts1.redJ = zeros(7);
contacts1.validmask = ones(7);
% predict: 1-4, a-c, 1-5, 3-4, 2-c
contacts1.rawpairs = [...
    1 6 1 3 2 ; ...
    4 7 5 4 7 ...
];
contacts1.matrix = [...
%   1 2 3 4 5 a c
    0 0 0 1 1 0 0 ; ... % 1
    0 0 0 0 0 0 1 ; ... % 2
    0 0 0 1 0 0 0 ; ... % 3
    1 0 1 0 0 0 0 ; ... % 4
    1 0 0 0 0 0 0 ; ... % 5
    0 0 0 0 0 0 1 ; ... % a
    0 1 0 0 0 1 0 ...
];
contacts1.mapped{1, 1} = {...
    1 1 3 ; ...
    4 5 4 ...
};
contacts1.mapped{1, 2} = {...
     2 ; ...
    'c' ...
};
contacts1.mapped{2, 1} = {...
    'c' ; ...
     2 ...
};
contacts1.mapped{2, 2} = {...
    'a' ; ...
    'c' ...
};

contacts1_checked = checkcontacts(contacts1, diststruct);

isequal_flat = @(v1, v2) isequal(v1(:), v2(:));

utexpect(all(isfield(contacts1_checked, {'check', 'check_mapped'})) && ...
    isstruct(contacts1_checked.check) && iscell(contacts1_checked.check_mapped) && ...
    isequal_flat(size(contacts1_checked.check_mapped), [2 2]) && ...
    all(cellfun(@isstruct, contacts1_checked.check_mapped(:))), ...
    'checkcontacts output structure has correct fields');

utexpect(isequal_flat(contacts1_checked.check.knownmask, [true true false true false]), ...
    'checkcontacts knownmask');

utexpect(isequal_flat(contacts1_checked.check_mapped{1, 1}.knownmask, [true false true]) && ...
    isequal_flat(contacts1_checked.check_mapped{1, 2}.knownmask, false) && ...
    isequal_flat(contacts1_checked.check_mapped{2, 1}.knownmask, false) && ...
    isequal_flat(contacts1_checked.check_mapped{2, 2}.knownmask, true), ...
    'checkcontacts knownmask mapped');

utexpect(isequal_flat(contacts1_checked.check.correctmask([1 2 4]), [true true false]), ...
    'checkcontacts correctmask');

utexpect(isequal_flat(contacts1_checked.check_mapped{1, 1}.correctmask([1 3]), [true false]) && ...
    isequal_flat(contacts1_checked.check_mapped{2, 2}.correctmask, true), ...
    'checkcontacts correctmask mapped');

utexpect(all(abs(contacts1_checked.check.precision(:) - [1 ; 1 ; 1 ; 2/3 ; 2/3]) < eps), ...
    'checkcontacts precision');

utexpect(all(abs(contacts1_checked.check_mapped{1, 1}.precision(:) - [1 ; 1 ; 1/2]) < eps) && ...
    all(abs(contacts1_checked.check_mapped{1, 2}.precision(:) - 1) < eps) && ...
    all(abs(contacts1_checked.check_mapped{2, 1}.precision(:) - 1) < eps) && ...
    all(abs(contacts1_checked.check_mapped{2, 2}.precision(:) - 1) < eps), ...
    'checkcontacts precision mapped');

% there are 3 contacts shared between the sites of the alignment and those
% of the structure
% there are 5 sites in common, so the total possible number of contacts is 10
utexpect(all(abs(contacts1_checked.check.tprate(:) - [1/3 ; 2/3 ; 2/3 ; 2/3 ; 2/3]) < eps) && ...
    all(abs(contacts1_checked.check.fprate(:) - [0 ; 0 ; 0 ; 1/7 ; 1/7]) < eps), ...
    'checkcontacts tprate & fprate');

utexpect(all(abs(contacts1_checked.check_mapped{1, 1}.tprate(:) - [1 ; 1 ; 1]) < eps) && ...
    all(abs(contacts1_checked.check_mapped{1, 1}.fprate(:) - [0 ; 0 ; 1/2]) < eps) && ...
    all(abs(contacts1_checked.check_mapped{1, 2}.tprate(:) - 1) < eps) && ...
    all(abs(contacts1_checked.check_mapped{1, 2}.fprate(:)) < eps) && ...
    all(abs(contacts1_checked.check_mapped{2, 1}.tprate(:) - 1) < eps) && ...
    all(abs(contacts1_checked.check_mapped{2, 1}.fprate(:)) < eps) && ...
    all(abs(contacts1_checked.check_mapped{2, 2}.tprate(:) - 1) < eps) && ...
    all(abs(contacts1_checked.check_mapped{2, 2}.fprate(:)) < eps), ...
    'checkcontacts tprate & fprate mapped');

% now test 'threshold'
contacts1_checked_a = checkcontacts(contacts1, diststruct, 'threshold', 1);
contacts1_checked_b = checkcontacts(contacts1, diststruct, 'threshold', 10);

utexpect(isequal_flat(contacts1_checked_a.check.correctmask([1 2 4]), [false  false false]) && ...
    isequal_flat(contacts1_checked_a.check.knownmask, contacts1_checked.check.knownmask) && ...
    all(abs(contacts1_checked_a.check.precision(:) - [0 ; 0 ; 0 ; 0 ; 0]) < eps) && ...
    all(abs(contacts1_checked_a.check.tprate(:) - [1 ; 1 ; 1 ; 1 ; 1]) < eps) && ...
    all(abs(contacts1_checked_a.check.fprate(:) - [1/10 ; 2/10 ; 2/10 ; 3/10 ; 3/10]) < eps), ...
    'checkcontacts very small distance threshold');

utexpect(isequal_flat(contacts1_checked_b.check.correctmask([1 2 4]), [true true true]) && ...
    isequal_flat(contacts1_checked_b.check.knownmask, contacts1_checked.check.knownmask) && ...
    all(abs(contacts1_checked_b.check.precision(:) - [1 ; 1 ; 1 ; 1 ; 1]) < eps) && ...
    all(abs(contacts1_checked_b.check.tprate(:) - [1/10 ; 2/10 ; 2/10 ; 3/10 ; 3/10]) < eps) && ...
    all(abs(contacts1_checked_b.check.fprate(:) - [0 ; 0 ; 0 ; 0 ; 0]) < eps), ...
    'checkcontacts very large distance threshold');

% test that this works with non-trivial validmasks
diststruct2 = diststruct;

diststruct2.validmask(3, :) = false;
diststruct2.validmask(:, 3) = false;

contacts2_checked = checkcontacts(contacts1, diststruct2);
utexpect(isequal_flat(contacts2_checked.check.knownmask, [false true false false false]), ...
    'checkcontacts knownmask with non-trivial validmask');

utexpect(isequal_flat(contacts2_checked.check_mapped{1, 1}.knownmask, [false false false]) && ...
    isequal_flat(contacts2_checked.check_mapped{1, 2}.knownmask, false) && ...
    isequal_flat(contacts2_checked.check_mapped{2, 1}.knownmask, false) && ...
    isequal_flat(contacts2_checked.check_mapped{2, 2}.knownmask, true), ...
    'checkcontacts knownmask mapped with non-trivial validmask');

utexpect(isequal_flat(contacts2_checked.check.correctmask(2), true), ...
    'checkcontacts correctmask with non-trivial validmask');

utexpect(isequal_flat(contacts2_checked.check_mapped{2, 2}.correctmask, true), ...
    'checkcontacts correctmask mapped with non-trivial validmask');

utexpect(all(abs(contacts2_checked.check.precision(:) - [1 ; 1 ; 1 ; 1 ; 1]) < eps), ...
    'checkcontacts precision with non-trivial validmask');

utexpect(all(abs(contacts2_checked.check_mapped{1, 1}.precision(:) - [1 ; 1 ; 1]) < eps) && ...
    all(abs(contacts2_checked.check_mapped{1, 2}.precision(:) - 1) < eps) && ...
    all(abs(contacts2_checked.check_mapped{2, 1}.precision(:) - 1) < eps) && ...
    all(abs(contacts2_checked.check_mapped{2, 2}.precision(:) - 1) < eps), ...
    'checkcontacts precision mapped with non-trivial validmask');

% essentially what happened now is that site 4 was removed from the
% structural data; only 1 contact remains among the common indices
% 4 sites are in common, so 6 total possible contacts
utexpect(all(abs(contacts2_checked.check.tprate(:) - [1 ; 1 ; 1 ; 1 ; 1]) < eps) && ...
    all(abs(contacts2_checked.check.fprate(:) - [0 ; 0 ; 0 ; 0 ; 0]) < eps), ...
    'checkcontacts tprate & fprate with non-trivial validmask');

utexpect(all(abs(contacts2_checked.check_mapped{1, 1}.tprate(:) - [1 ; 1 ; 1]) < eps) && ...
    all(abs(contacts2_checked.check_mapped{1, 1}.fprate(:) - [0 ; 0 ; 0]) < eps) && ...
    all(abs(contacts2_checked.check_mapped{1, 2}.tprate(:) - 1) < eps) && ...
    all(abs(contacts2_checked.check_mapped{1, 2}.fprate(:)) < eps) && ...
    all(abs(contacts2_checked.check_mapped{2, 1}.tprate(:) - 1) < eps) && ...
    all(abs(contacts2_checked.check_mapped{2, 1}.fprate(:)) < eps) && ...
    all(abs(contacts2_checked.check_mapped{2, 2}.tprate(:) - 1) < eps) && ...
    all(abs(contacts2_checked.check_mapped{2, 2}.fprate(:)) < eps), ...
    'checkcontacts tprate & fprate mapped with non-trivial validmask');

end